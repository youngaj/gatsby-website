{"version":3,"sources":["webpack:///./src/components/podcast.tsx","webpack:///./src/pages/podcasts.tsx"],"names":["useStyles","makeStyles","theme","sharedStyles","podcastBlock","display","gridGap","spacing","gridTemplateColumns","border","colors","muted","padding","textAlign","title","marginBottom","subTitle","Podcast","text","length","substr","lastSpaceIndex","data","useTheme","css","useState","show","setShow","className","join","src","uuid","alt","pt30","href","url","mutedText","pt20","moment","lastEpisodePublished","fromNow","displayFullDetails","description","substring","lastIndexOf","onClick","showDetails","container","margin","podcastSort","a","b","Date","parse","PodcastPage","props","queue","podcasts","podcastData","setData","useEffect","getPodcasts","then","sort","map","index","key"],"mappings":"4OAKMA,EAAYC,aAAW,SAACC,GAAD,wBACvBC,YAAaD,GADU,CAE1BE,aAAc,CACXC,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvBC,oBAAqB,UACrBC,OAAQ,aAAaC,IAAOC,MAC5BC,QAASV,EAAMK,QAAQ,GACvB,QAAS,CACNM,UAAW,SAGjBC,MAAO,CACJC,aAAcb,EAAMK,QAAQ,IAE/BS,SAAU,CACPD,aAAcb,EAAMK,QAAQ,SAmDnBU,EAxCC,SAAC,GAAa,IAPbC,EAAMC,EAChBC,EACEC,EAKUC,EAAW,EAAXA,KACVpB,EAAQqB,cACRC,EAAMxB,EAAUE,GAFK,EAIHuB,mBAASH,GAA1BI,EAJoB,KAIdC,EAJc,KAU3B,OACG,yBAAKC,UAAW,CAACJ,EAAIpB,cAAcyB,KAAK,MACrC,6BACG,yBACGC,IAAG,sDAAwDJ,EAAKK,KAA7D,OACHC,IAAI,kBAGV,6BACG,yBAAKJ,UAAW,CAACJ,EAAIV,MAAOU,EAAIS,MAAMJ,KAAK,MACxC,uBAAGK,KAAMR,EAAKS,KAAMT,EAAKZ,QAE5B,uBAAGc,UAAW,CAACJ,EAAIY,UAAWZ,EAAIa,KAAMb,EAAIR,UAAUa,KAAK,MAA3D,oBACqBS,IAAOZ,EAAKa,sBAAsBC,WAEvD,2BACId,EAAKe,oBAAsBf,EAAKgB,YAAYvB,OAAS,IACnD,8BAAOO,EAAKgB,aAEZ,8BApCDxB,EAqCaQ,EAAKgB,YArCZvB,EAqCyB,IApCzCC,EAASF,EAAKyB,UAAU,EAAGxB,GACzBE,EAAiBD,EAAOwB,YAAY,KAC1CxB,EAASA,EAAOuB,UAAU,EAAGtB,IAiCd,OACwC,IACrC,uBAAGwB,QAAS,kBA1BV,SAACnB,GAClBA,EAAKe,oBAAqB,EAC1Bd,EAAQ,OAAD,UAAMD,IAwBoBoB,CAAYpB,KAA9B,kBCpDf1B,EAAYC,aAAW,SAACC,GAAD,wBACvBC,YAAaD,GADU,CAE1B6C,UAAW,CACR1C,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvBC,oBAAqB,UACrBwC,OAAQ9C,EAAMK,QAAQ,SAItB0C,EAAc,SAACC,EAAGC,GACrB,OACGC,KAAKC,MAAMF,EAAEZ,sBAAwBa,KAAKC,MAAMH,EAAEX,uBA4BzCe,UAxBK,SAACC,GAClB,IAAMrD,EAAQqB,cACRC,EAAMxB,EAAUE,GAFiB,EAIRuB,mBAAS,CAAE+B,MAAO,GAAIC,SAAU,KAAxDC,EAJgC,KAInBC,EAJmB,KAWvC,OANAC,qBAAU,WACPC,cAAcC,MAAK,SAACxC,GACjBqC,EAAQ,OAAD,UAAMrC,SAEhB,IAGA,kBAAC,IAAD,KACG,kBAAC,IAAD,MACA,wCACA,yBAAKM,UAAWJ,EAAIuB,WAChBW,EAAYD,SAASM,KAAKd,GAAae,KAAI,SAACtC,EAAMuC,GAAP,OACzC,kBAAC,EAAD,CAAS3C,KAAMI,EAAMwC,IAAG,WAAaxC,EAAKZ,MAAlB,IAA2BmD","file":"component---src-pages-podcasts-tsx-aa785be1c9fb0f89d7df.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles, colors } from '../styles/global'\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   podcastBlock: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 2fr',\r\n      border: `1px solid ${colors.muted}`,\r\n      padding: theme.spacing(2),\r\n      '& div': {\r\n         textAlign: 'left',\r\n      },\r\n   },\r\n   title: {\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   subTitle: {\r\n      marginBottom: theme.spacing(1),\r\n   },\r\n}))\r\n\r\nconst shorten = (text, length) => {\r\n   let substr = text.substring(0, length)\r\n   const lastSpaceIndex = substr.lastIndexOf(' ')\r\n   substr = substr.substring(0, lastSpaceIndex)\r\n   return substr\r\n}\r\n\r\nconst Podcast = ({ data }) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   const [show, setShow] = useState(data)\r\n   const showDetails = (show) => {\r\n      show.displayFullDetails = true\r\n      setShow({ ...show })\r\n   }\r\n\r\n   return (\r\n      <div className={[css.podcastBlock].join(' ')}>\r\n         <div>\r\n            <img\r\n               src={`https://static.pocketcasts.com/discover/images/130/${show.uuid}.jpg`}\r\n               alt=\"{show.title}\"\r\n            />\r\n         </div>\r\n         <div>\r\n            <div className={[css.title, css.pt30].join(' ')}>\r\n               <a href={show.url}>{show.title}</a>\r\n            </div>\r\n            <p className={[css.mutedText, css.pt20, css.subTitle].join(' ')}>\r\n               Lastest Episode: {moment(show.lastEpisodePublished).fromNow()}\r\n            </p>\r\n            <p>\r\n               {show.displayFullDetails || show.description.length < 200 ? (\r\n                  <span>{show.description}</span>\r\n               ) : (\r\n                  <div>\r\n                     {shorten(show.description, 200)} ...{' '}\r\n                     <a onClick={() => showDetails(show)}>show more</a>\r\n                  </div>\r\n               )}\r\n            </p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Podcast\r\n","// Gatsby supports TypeScript natively!\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PageProps } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport Nav from '../components/nav'\r\nimport { getPodcasts } from '../utils/podcastService'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles } from '../styles/global'\r\nimport Podcast from '../components/podcast'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   container: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 1fr',\r\n      margin: theme.spacing(4),\r\n   },\r\n}))\r\n\r\nconst podcastSort = (a, b) => {\r\n   return (\r\n      Date.parse(b.lastEpisodePublished) - Date.parse(a.lastEpisodePublished)\r\n   )\r\n}\r\n\r\nconst PodcastPage = (props: PageProps) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   const [podcastData, setData] = useState({ queue: [], podcasts: [] })\r\n   useEffect(() => {\r\n      getPodcasts().then((data) => {\r\n         setData({ ...data })\r\n      })\r\n   }, [])\r\n\r\n   return (\r\n      <Layout>\r\n         <Nav></Nav>\r\n         <h1>Podcasts</h1>\r\n         <div className={css.container}>\r\n            {podcastData.podcasts.sort(podcastSort).map((show, index) => (\r\n               <Podcast data={show} key={`episode-${show.title}-${index}`} />\r\n            ))}\r\n         </div>\r\n      </Layout>\r\n   )\r\n}\r\n\r\nexport default PodcastPage\r\n"],"sourceRoot":""}