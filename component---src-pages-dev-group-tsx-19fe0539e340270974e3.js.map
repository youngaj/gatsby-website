{"version":3,"sources":["webpack:///./src/components/presentation/centerDivider.tsx","webpack:///./src/components/devGroupSession.tsx","webpack:///./src/pages/devGroup.tsx","webpack:///./src/components/presentation/colorBox.tsx","webpack:///./src/utils/devGroupService.ts"],"names":["useStyles","makeStyles","theme","divider","display","marginTop","marginBottom","backgroundColor","palette","secondary","main","height","width","marginLeft","marginRight","CenterDivider","useTheme","css","className","sharedStyles","session","gridTemplateColumns","gridGap","spacing","padding","details","border","colors","muted","borderRadius","DevGroupSession","props","src","thumbnails","medium","url","alt","description","pt65","wt700","join","day","monthYear","style","textAlign","href","link","target","mutedText","title","container","breakpoints","down","DevGroup","data","initialState","sessions","nodes","map","x","formatVideo","useState","videos","setVideos","useEffect","getVideos","then","active","bg","key","id","pageQuery","box","lineHeight","verticalAlign","ColorBox","children","a","axios","get","response","video","dayjs","publishedAt","format"],"mappings":"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","file":"component---src-pages-dev-group-tsx-19fe0539e340270974e3.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles, useTheme, Theme } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   divider: {\r\n      display: 'block',\r\n      marginTop: '35px',\r\n      marginBottom: '35px',\r\n      backgroundColor: theme.palette.secondary.main,\r\n      height: '2px',\r\n      width: '150px',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n   },\r\n}))\r\n\r\nconst CenterDivider = () => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   return <span className={css.divider}></span>\r\n}\r\n\r\nexport default CenterDivider\r\n","import React from 'react'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles, colors } from '../styles/global'\r\nimport ColorBox from '../components/presentation/colorBox'\r\nimport { DevGroupVideo } from '../models'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   session: {\r\n      display: 'grid',\r\n      gridTemplateColumns: '1fr',\r\n      gridGap: theme.spacing(2),\r\n      padding: theme.spacing(2),\r\n   },\r\n   details: {\r\n      display: 'grid',\r\n      gridTemplateColumns: '1fr 3fr',\r\n      gridGap: theme.spacing(2),\r\n      border: `1px solid ${colors.muted}`,\r\n      borderRadius: '10px',\r\n      padding: theme.spacing(2),\r\n   },\r\n}))\r\n\r\ninterface DevGroupSessionProps {\r\n   session: DevGroupVideo\r\n}\r\n\r\nconst DevGroupSession = (props: DevGroupSessionProps) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n   const session = props.session\r\n   return (\r\n      <div className={css.session}>\r\n         <div>\r\n            <img\r\n               src={session.thumbnails.medium.url}\r\n               alt={session.description}\r\n            />\r\n         </div>\r\n         <div className={css.details}>\r\n            <ColorBox>\r\n               <div>\r\n                  <div className={[css.pt65, css.wt700].join(' ')}>\r\n                     {session.day}\r\n                  </div>\r\n                  <div>{session.monthYear}</div>\r\n               </div>\r\n            </ColorBox>\r\n            <span style={{ textAlign: 'left' }}>\r\n               <a href={session.link} target=\"_blank\" className={css.mutedText}>\r\n                  {session.title}\r\n               </a>\r\n            </span>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default DevGroupSession\r\n","import React, { useState, useEffect } from 'react'\r\nimport { makeStyles, useTheme, Theme } from '@material-ui/core/styles'\r\n\r\nimport { sharedStyles } from '../styles/global'\r\nimport SiteSection from '../components/presentation/siteSection'\r\nimport SubHeading from '../components/presentation/subHeading'\r\nimport CenterDivider from '../components/presentation/centerDivider'\r\nimport { getVideos, formatVideo } from '../utils/devGroupService'\r\nimport { graphql } from 'gatsby'\r\nimport DevGroupSession from '../components/devGroupSession'\r\nimport Nav from '../components/nav'\r\nimport Layout from '../components/layout'\r\nimport { DevGroupVideo, YouTubeVideo } from '../models'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   container: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 1fr 1fr',\r\n      [theme.breakpoints.down('sm')]: {\r\n         gridTemplateColumns: '1fr',\r\n      },\r\n   },\r\n}))\r\n\r\nconst DevGroup = ({ data }) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n   const initialState: DevGroupVideo[] = data.sessions.nodes.map(\r\n      (x: YouTubeVideo) => formatVideo(x)\r\n   )\r\n   const [videos, setVideos] = useState(initialState)\r\n   useEffect(() => {\r\n      getVideos().then((data) => {\r\n         setVideos(data)\r\n      })\r\n   }, [])\r\n\r\n   return (\r\n      <Layout>\r\n         <Nav active=\"devGroup\" />\r\n         <SiteSection bg=\"dark\">\r\n            <h2>\r\n               <SubHeading>Dev Group Sessions</SubHeading>\r\n            </h2>\r\n            <p className={css.mutedText}>\r\n               Attending developer meet-ups are a great way of expanding your\r\n               knowledge and skills. But many of us have family and other\r\n               obligations outside of work so I created and hosted a bi-weekly\r\n               NASA wide developer group that ran for over 8 years. Below are\r\n               excerpts from those sessions.\r\n            </p>\r\n            <span>\r\n               <CenterDivider />\r\n            </span>\r\n            <div className={css.container}>\r\n               {videos.map((session) => (\r\n                  <DevGroupSession\r\n                     session={session}\r\n                     key={`devGroupSession_${session.id}`}\r\n                  />\r\n               ))}\r\n            </div>\r\n         </SiteSection>\r\n      </Layout>\r\n   )\r\n}\r\n\r\nexport default DevGroup\r\n\r\nexport const pageQuery = graphql`\r\n   query SessionQuery {\r\n      sessions: allDevGroupSession(sort: { order: DESC, fields: publishedAt }) {\r\n         nodes {\r\n            id\r\n            link\r\n            title\r\n            description\r\n            thumbnails {\r\n               default {\r\n                  url\r\n               }\r\n               high {\r\n                  url\r\n               }\r\n               medium {\r\n                  url\r\n               }\r\n            }\r\n            publishedAt(formatString: \"MMMM D, YYYY\")\r\n         }\r\n      }\r\n   }\r\n`\r\n","import React, { useState } from 'react'\r\nimport { useTheme, makeStyles, Theme } from '@material-ui/core'\r\nimport { sharedStyles } from '../../styles/global'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   box: {\r\n      backgroundColor: theme.palette.secondary.main,\r\n      width: '90px',\r\n      height: '85px',\r\n      lineHeight: '40px',\r\n      display: 'block',\r\n      verticalAlign: 'center',\r\n      borderRadius: '8px',\r\n   },\r\n}))\r\n\r\nconst ColorBox = ({ children }) => {\r\n   const theme = useTheme\r\n   const css = useStyles(theme)\r\n\r\n   return <div className={css.box}>{children}</div>\r\n}\r\n\r\nexport default ColorBox\r\n","import axios from 'axios'\r\nimport dayjs from 'dayjs'\r\nimport { DevGroupVideo, YouTubeVideo } from '../models'\r\n\r\nexport const getVideos = async (): Promise<DevGroupVideo[]> => {\r\n   const response = await axios.get(\r\n      'https://gsfcdevgroup.azurewebsites.net/api/GetGSFCDevGroupSessions'\r\n   )\r\n   const data: DevGroupVideo[] = response.data.map((x) => {\r\n      return formatVideo(x)\r\n   })\r\n   return data\r\n}\r\n\r\nexport const formatVideo = (video: YouTubeVideo): DevGroupVideo | undefined => {\r\n   if (video) {\r\n      const devGroupVideo: DevGroupVideo = {\r\n         ...video,\r\n         day: dayjs(video.publishedAt).format('D'),\r\n         monthYear: dayjs(video.publishedAt).format('MMM-YYYY'),\r\n      }\r\n      return devGroupVideo\r\n   }\r\n}\r\n"],"sourceRoot":""}