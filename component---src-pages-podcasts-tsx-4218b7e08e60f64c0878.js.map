{"version":3,"sources":["webpack:///./node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js","webpack:///./src/components/layout.js","webpack:///./src/utils/podcastService.ts","webpack:///./src/components/podcast.tsx","webpack:///./src/pages/podcasts.tsx"],"names":["props","children","localTheme","theme","outerTheme","useTheme","useMemo","output","mergeOuterLocalTheme","nested","createElement","ThemeContext","Provider","value","createMuiTheme","palette","primary","main","secondary","colors","accent","Layout","getPodcasts","a","axios","get","response","data","useStyles","makeStyles","sharedStyles","podcastBlock","display","gridGap","spacing","gridTemplateColumns","border","muted","padding","textAlign","title","marginBottom","subTitle","Podcast","text","length","substr","lastSpaceIndex","css","useState","show","setShow","className","join","src","uuid","alt","pt30","href","url","mutedText","pt20","moment","lastEpisodePublished","fromNow","displayFullDetails","description","substring","lastIndexOf","onClick","showDetails","container","margin","podcastSort","b","Date","parse","PodcastPage","queue","podcasts","podcastData","setData","useEffect","then","sort","map","index","key"],"mappings":"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","file":"component---src-pages-podcasts-tsx-4218b7e08e60f64c0878.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends(_extends({}, outerTheme), localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? void 0 : void 0;\n}\n\nexport default ThemeProvider;","/**\r\n * Layout component that queries for data\r\n * with Gatsby's useStaticQuery component\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\nimport { colors } from '../styles/global'\r\nimport './layout.css'\r\n\r\nconst theme = createMuiTheme({\r\n   palette: {\r\n      primary: {\r\n         main: '#ffffff',\r\n      },\r\n      secondary: {\r\n         main: colors.accent,\r\n      },\r\n   },\r\n})\r\n\r\nconst Layout = ({ children }) => {\r\n   return (\r\n      <>\r\n         <div>\r\n            <ThemeProvider theme={theme}>\r\n               <main>{children}</main>\r\n            </ThemeProvider>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nLayout.propTypes = {\r\n   children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","import axios from 'axios'\r\n\r\nexport const getPodcasts = async () => {\r\n   const response = await axios.get(\r\n      'https://andrepodcasts.azurewebsites.net/api/PodcastQueue'\r\n   )\r\n\r\n   const data = response.data\r\n   return data\r\n}\r\n","import React, { useState } from 'react'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles, colors } from '../styles/global'\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   podcastBlock: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 2fr',\r\n      border: `1px solid ${colors.muted}`,\r\n      padding: theme.spacing(2),\r\n      '& div': {\r\n         textAlign: 'left',\r\n      },\r\n   },\r\n   title: {\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   subTitle: {\r\n      marginBottom: theme.spacing(1),\r\n   },\r\n}))\r\n\r\nconst shorten = (text, length) => {\r\n   let substr = text.substring(0, length)\r\n   const lastSpaceIndex = substr.lastIndexOf(' ')\r\n   substr = substr.substring(0, lastSpaceIndex)\r\n   return substr\r\n}\r\n\r\nconst Podcast = ({ data }) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   const [show, setShow] = useState(data)\r\n   const showDetails = (show) => {\r\n      show.displayFullDetails = true\r\n      setShow({ ...show })\r\n   }\r\n\r\n   return (\r\n      <div className={[css.podcastBlock].join(' ')}>\r\n         <div>\r\n            <img\r\n               src={`https://static.pocketcasts.com/discover/images/130/${show.uuid}.jpg`}\r\n               alt=\"{show.title}\"\r\n            />\r\n         </div>\r\n         <div>\r\n            <div className={[css.title, css.pt30].join(' ')}>\r\n               <a href={show.url}>{show.title}</a>\r\n            </div>\r\n            <p className={[css.mutedText, css.pt20, css.subTitle].join(' ')}>\r\n               Lastest Episode: {moment(show.lastEpisodePublished).fromNow()}\r\n            </p>\r\n            <p>\r\n               {show.displayFullDetails || show.description.length < 200 ? (\r\n                  <span>{show.description}</span>\r\n               ) : (\r\n                  <div>\r\n                     {shorten(show.description, 200)} ...{' '}\r\n                     <a onClick={() => showDetails(show)}>show more</a>\r\n                  </div>\r\n               )}\r\n            </p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Podcast\r\n","// Gatsby supports TypeScript natively!\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PageProps } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport Nav from '../components/nav'\r\nimport { getPodcasts } from '../utils/podcastService'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles } from '../styles/global'\r\nimport Podcast from '../components/podcast'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   container: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 1fr',\r\n      margin: theme.spacing(4),\r\n   },\r\n}))\r\n\r\nconst podcastSort = (a, b) => {\r\n   return (\r\n      Date.parse(b.lastEpisodePublished) - Date.parse(a.lastEpisodePublished)\r\n   )\r\n}\r\n\r\nconst PodcastPage = (props: PageProps) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   const [podcastData, setData] = useState({ queue: [], podcasts: [] })\r\n   useEffect(() => {\r\n      getPodcasts().then((data) => {\r\n         setData({ ...data })\r\n      })\r\n   }, [])\r\n\r\n   return (\r\n      <Layout>\r\n         <Nav></Nav>\r\n         <h1>Podcasts</h1>\r\n         <div className={css.container}>\r\n            {podcastData.podcasts.sort(podcastSort).map((show, index) => (\r\n               <Podcast data={show} key={`episode-${show.title}-${index}`} />\r\n            ))}\r\n         </div>\r\n      </Layout>\r\n   )\r\n}\r\n\r\nexport default PodcastPage\r\n"],"sourceRoot":""}