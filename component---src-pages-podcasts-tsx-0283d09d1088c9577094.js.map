{"version":3,"sources":["webpack:///./src/pages/podcasts.tsx"],"names":["useStyles","makeStyles","theme","sharedStyles","container","display","gap","gridTemplateColumns","breakpoints","down","margin","tabs","marginTop","tabHeader","fontSize","divider","marginBottom","backgroundColor","palette","secondary","main","height","width","marginLeft","marginRight","count","color","colors","muted","PodcastPage","props","useTheme","css","twitter","info","me","social","find","x","name","useState","queue","podcasts","starred","appearances","podcastData","setData","setTabs","TabEnum","Appearances","visibleTab","setVisibleTab","useEffect","getPodcastInfo","then","data","title","length","value","Starred","Queue","Subscribed","active","bg","className","mutedText","onClick","e","href","link","username","map","tab","isActive","headerCss","join","episode","index","key","sort","a","b","lastEpisodePublished","getTime","show"],"mappings":"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","file":"component---src-pages-podcasts-tsx-0283d09d1088c9577094.js","sourcesContent":["// Gatsby supports TypeScript natively!\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PageProps } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport Nav from '../components/nav'\r\nimport { getPodcastInfo } from '../utils/podcastService'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { colors, sharedStyles } from '../styles/global'\r\nimport Podcast from '../components/podcast'\r\nimport SiteSection from '../components/presentation/siteSection'\r\nimport { info } from '../data/info'\r\nimport SubHeading from '../components/presentation/subHeading'\r\nimport { PodcastData, Tab, TabEnum } from '../models'\r\nimport PodCastEpisode from '../components/podcastEpisode'\r\nimport PodCastAppearance from '../components/podcastAppearance'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   container: {\r\n      display: 'grid',\r\n      gap: '.5rem',\r\n      gridTemplateColumns: '1fr 1fr',\r\n      [theme.breakpoints.down('sm')]: {\r\n         gridTemplateColumns: '1fr',\r\n         margin: 'auto',\r\n      },\r\n   },\r\n   tabs: {\r\n      display: 'grid',\r\n      gridTemplateColumns: '1fr 1fr 1fr 1fr',\r\n      gap: '1rem',\r\n      margin: '1rem',\r\n      marginTop: '2rem',\r\n      [theme.breakpoints.down('sm')]: {\r\n         gridTemplateColumns: '1fr 1fr',\r\n      },\r\n   },\r\n   tabHeader: {\r\n      fontSize: '1.5rem',\r\n      [theme.breakpoints.down('sm')]: {\r\n         fontSize: '1.0rem',\r\n      },\r\n   },\r\n   divider: {\r\n      display: 'block',\r\n      marginTop: '1rem',\r\n      marginBottom: '15px',\r\n      backgroundColor: theme.palette.secondary.main,\r\n      height: '2px',\r\n      width: '150px',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      [theme.breakpoints.down('sm')]: {\r\n         width: '100px',\r\n      },\r\n   },\r\n   count: {\r\n      fontSize: '1.2rem',\r\n      color: colors.muted,\r\n      [theme.breakpoints.down('sm')]: {\r\n         display: 'none',\r\n      },\r\n   },\r\n}))\r\n\r\nconst PodcastPage = (props: PageProps) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n   const twitter = info.me.social.find((x) => x.name === 'Twitter')\r\n\r\n   const [podcastData, setData] = useState<PodcastData>({\r\n      queue: [],\r\n      podcasts: [],\r\n      starred: [],\r\n      appearances: [],\r\n   })\r\n   const [tabs, setTabs] = useState<Tab[]>([])\r\n   const [visibleTab, setVisibleTab] = useState<TabEnum>(TabEnum.Appearances)\r\n\r\n   useEffect(() => {\r\n      getPodcastInfo().then((data) => {\r\n         setData({ ...data })\r\n         setTabs([\r\n            {\r\n               title: `Appearances`,\r\n               count: data.appearances?.length,\r\n               value: TabEnum.Appearances,\r\n            },\r\n            {\r\n               title: `Stared`,\r\n               count: data.starred?.length,\r\n               value: TabEnum.Starred,\r\n            },\r\n            {\r\n               title: `In Queue`,\r\n               count: data.queue?.length,\r\n               value: TabEnum.Queue,\r\n            },\r\n            {\r\n               title: `Subscribed`,\r\n               count: data.podcasts?.length,\r\n               value: TabEnum.Subscribed,\r\n            },\r\n         ])\r\n      })\r\n   }, [])\r\n\r\n   return (\r\n      <Layout>\r\n         <Nav active=\"podcasts\"></Nav>\r\n         <SiteSection bg=\"dark\">\r\n            <SubHeading>Podcasts</SubHeading>\r\n            <p className={css.mutedText}>\r\n               I subscribe to{' '}\r\n               <a onClick={(e) => setVisibleTab(TabEnum.Subscribed)}>\r\n                  {podcastData.podcasts.length}\r\n               </a>{' '}\r\n               podcasts and have appeared on{' '}\r\n               <a onClick={(e) => setVisibleTab(TabEnum.Appearances)}>\r\n                  {podcastData.appearances.length}\r\n               </a>{' '}\r\n               episodes thus far. Podcasts are a great way to keep up with the\r\n               latest around the industry. They are also a great way avoid going\r\n               insane during long commutes. You will also find the podcast that\r\n               are currently in my{' '}\r\n               <a onClick={(e) => setVisibleTab(TabEnum.Queue)}>\r\n                  listening queue\r\n               </a>\r\n               . Follow along and/or send me suggestions{' '}\r\n               <a href={twitter?.link}>{twitter?.username}</a>\r\n            </p>\r\n            <div className={css.tabs}>\r\n               {tabs.map((tab) => {\r\n                  const isActive = tab.value === visibleTab\r\n                  const headerCss = isActive\r\n                     ? css.tabHeader\r\n                     : [css.tabHeader, css.mutedText].join(' ')\r\n                  return (\r\n                     <span\r\n                        className={headerCss}\r\n                        onClick={(e) => setVisibleTab(tab.value)}\r\n                     >\r\n                        {tab.title}\r\n                        <span className={css.count}> ({tab.count})</span>\r\n                        {isActive && <span className={css.divider}></span>}\r\n                     </span>\r\n                  )\r\n               })}\r\n            </div>\r\n\r\n            {visibleTab === TabEnum.Queue && (\r\n               <div className={css.container}>\r\n                  {podcastData.queue.map((episode, index) => (\r\n                     <PodCastEpisode\r\n                        episode={episode}\r\n                        key={`episode-${episode.title}-${index}`}\r\n                     ></PodCastEpisode>\r\n                  ))}\r\n               </div>\r\n            )}\r\n            {visibleTab === TabEnum.Subscribed && (\r\n               <div className={css.container}>\r\n                  {podcastData.podcasts\r\n                     .sort(\r\n                        (a, b) =>\r\n                           b.lastEpisodePublished.getTime() -\r\n                           a.lastEpisodePublished.getTime()\r\n                     )\r\n                     .map((show, index) => (\r\n                        <Podcast\r\n                           data={show}\r\n                           key={`episode-${show.title}-${index}`}\r\n                        />\r\n                     ))}\r\n               </div>\r\n            )}\r\n            {visibleTab === TabEnum.Starred && (\r\n               <div className={css.container}>\r\n                  {podcastData.starred.map((episode, index) => (\r\n                     <PodCastEpisode\r\n                        episode={episode}\r\n                        key={`starred-episode-${episode.title}-${index}`}\r\n                     ></PodCastEpisode>\r\n                  ))}\r\n               </div>\r\n            )}\r\n            {visibleTab === TabEnum.Appearances && (\r\n               <div className={css.container}>\r\n                  {podcastData.appearances.map((episode, index) => (\r\n                     <PodCastAppearance\r\n                        episode={episode}\r\n                        key={`appearance-episode-${episode.title}-${index}`}\r\n                     ></PodCastAppearance>\r\n                  ))}\r\n               </div>\r\n            )}\r\n         </SiteSection>\r\n      </Layout>\r\n   )\r\n}\r\n\r\nexport default PodcastPage\r\n"],"sourceRoot":""}