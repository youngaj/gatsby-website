{"version":3,"sources":["webpack:///./src/utils/podcastService.ts","webpack:///./src/components/podcast.tsx","webpack:///./src/pages/podcasts.tsx"],"names":["getPodcasts","a","axios","get","response","data","useStyles","makeStyles","theme","sharedStyles","podcastBlock","display","gridGap","spacing","gridTemplateColumns","border","colors","muted","padding","textAlign","title","marginBottom","subTitle","Podcast","text","length","substr","lastSpaceIndex","useTheme","css","useState","show","setShow","className","join","src","uuid","alt","pt30","href","url","mutedText","pt20","moment","lastEpisodePublished","fromNow","displayFullDetails","description","substring","lastIndexOf","onClick","showDetails","container","margin","podcastSort","b","Date","parse","PodcastPage","props","queue","podcasts","podcastData","setData","useEffect","then","sort","map","index","key"],"mappings":"oUAEO,IAAMA,EAAW,e,EAAA,G,EAAA,UAAG,8BAAAC,EAAA,sEACDC,IAAMC,IAC1B,4DAFqB,cAClBC,EADkB,OAKlBC,EAAOD,EAASC,KALE,kBAMjBA,GANiB,0C,+KAAH,sD,mLCGlBC,EAAYC,aAAW,SAACC,GAAD,sCACvBC,YAAaD,IADU,IAE1BE,aAAc,CACXC,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvBC,oBAAqB,UACrBC,OAAQ,aAAaC,IAAOC,MAC5BC,QAASV,EAAMK,QAAQ,GACvB,QAAS,CACNM,UAAW,SAGjBC,MAAO,CACJC,aAAcb,EAAMK,QAAQ,IAE/BS,SAAU,CACPD,aAAcb,EAAMK,QAAQ,SAmDnBU,EAxCC,SAAC,GAAa,IAPbC,EAAMC,EAChBC,EACEC,EAKUtB,EAAW,EAAXA,KACVG,EAAQoB,cACRC,EAAMvB,EAAUE,GAFK,EAIHsB,mBAASzB,GAA1B0B,EAJoB,KAIdC,EAJc,KAU3B,OACG,yBAAKC,UAAW,CAACJ,EAAInB,cAAcwB,KAAK,MACrC,6BACG,yBACGC,IAAG,sDAAwDJ,EAAKK,KAA7D,OACHC,IAAI,kBAGV,6BACG,yBAAKJ,UAAW,CAACJ,EAAIT,MAAOS,EAAIS,MAAMJ,KAAK,MACxC,uBAAGK,KAAMR,EAAKS,KAAMT,EAAKX,QAE5B,uBAAGa,UAAW,CAACJ,EAAIY,UAAWZ,EAAIa,KAAMb,EAAIP,UAAUY,KAAK,MAA3D,oBACqBS,IAAOZ,EAAKa,sBAAsBC,WAEvD,2BACId,EAAKe,oBAAsBf,EAAKgB,YAAYtB,OAAS,IACnD,8BAAOM,EAAKgB,aAEZ,8BApCDvB,EAqCaO,EAAKgB,YArCZtB,EAqCyB,IApCzCC,EAASF,EAAKwB,UAAU,EAAGvB,GACzBE,EAAiBD,EAAOuB,YAAY,KAC1CvB,EAASA,EAAOsB,UAAU,EAAGrB,IAiCd,OACwC,IACrC,uBAAGuB,QAAS,kBA1BV,SAACnB,GAClBA,EAAKe,oBAAqB,EAC1Bd,EAAQ,OAAD,UAAMD,IAwBoBoB,CAAYpB,KAA9B,kBCpDfzB,EAAYC,aAAW,SAACC,GAAD,sCACvBC,YAAaD,IADU,IAE1B4C,UAAW,CACRzC,QAAS,OACTC,QAASJ,EAAMK,QAAQ,GACvBC,oBAAqB,UACrBuC,OAAQ7C,EAAMK,QAAQ,SAItByC,EAAc,SAACrD,EAAGsD,GACrB,OACGC,KAAKC,MAAMF,EAAEX,sBAAwBY,KAAKC,MAAMxD,EAAE2C,uBA4BzCc,UAxBK,SAACC,GAClB,IAAMnD,EAAQoB,cACRC,EAAMvB,EAAUE,GAFiB,EAIRsB,mBAAS,CAAE8B,MAAO,GAAIC,SAAU,KAAxDC,EAJgC,KAInBC,EAJmB,KAWvC,OANAC,qBAAU,WACPhE,cAAciE,MAAK,SAAC5D,GACjB0D,EAAQ,OAAD,UAAM1D,SAEhB,IAGA,kBAAC,IAAD,KACG,kBAAC,IAAD,MACA,wCACA,yBAAK4B,UAAWJ,EAAIuB,WAChBU,EAAYD,SAASK,KAAKZ,GAAaa,KAAI,SAACpC,EAAMqC,GAAP,OACzC,kBAAC,EAAD,CAAS/D,KAAM0B,EAAMsC,IAAG,WAAatC,EAAKX,MAAlB,IAA2BgD","file":"component---src-pages-podcasts-tsx-09270dc35761ccc5d54b.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const getPodcasts = async () => {\r\n   const response = await axios.get(\r\n      'https://andrepodcasts.azurewebsites.net/api/PodcastQueue'\r\n   )\r\n\r\n   const data = response.data\r\n   return data\r\n}\r\n","import React, { useState } from 'react'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles, colors } from '../styles/global'\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   podcastBlock: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 2fr',\r\n      border: `1px solid ${colors.muted}`,\r\n      padding: theme.spacing(2),\r\n      '& div': {\r\n         textAlign: 'left',\r\n      },\r\n   },\r\n   title: {\r\n      marginBottom: theme.spacing(2),\r\n   },\r\n   subTitle: {\r\n      marginBottom: theme.spacing(1),\r\n   },\r\n}))\r\n\r\nconst shorten = (text, length) => {\r\n   let substr = text.substring(0, length)\r\n   const lastSpaceIndex = substr.lastIndexOf(' ')\r\n   substr = substr.substring(0, lastSpaceIndex)\r\n   return substr\r\n}\r\n\r\nconst Podcast = ({ data }) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   const [show, setShow] = useState(data)\r\n   const showDetails = (show) => {\r\n      show.displayFullDetails = true\r\n      setShow({ ...show })\r\n   }\r\n\r\n   return (\r\n      <div className={[css.podcastBlock].join(' ')}>\r\n         <div>\r\n            <img\r\n               src={`https://static.pocketcasts.com/discover/images/130/${show.uuid}.jpg`}\r\n               alt=\"{show.title}\"\r\n            />\r\n         </div>\r\n         <div>\r\n            <div className={[css.title, css.pt30].join(' ')}>\r\n               <a href={show.url}>{show.title}</a>\r\n            </div>\r\n            <p className={[css.mutedText, css.pt20, css.subTitle].join(' ')}>\r\n               Lastest Episode: {moment(show.lastEpisodePublished).fromNow()}\r\n            </p>\r\n            <p>\r\n               {show.displayFullDetails || show.description.length < 200 ? (\r\n                  <span>{show.description}</span>\r\n               ) : (\r\n                  <div>\r\n                     {shorten(show.description, 200)} ...{' '}\r\n                     <a onClick={() => showDetails(show)}>show more</a>\r\n                  </div>\r\n               )}\r\n            </p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Podcast\r\n","// Gatsby supports TypeScript natively!\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PageProps } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport Nav from '../components/nav'\r\nimport { getPodcasts } from '../utils/podcastService'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { sharedStyles } from '../styles/global'\r\nimport Podcast from '../components/podcast'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   container: {\r\n      display: 'grid',\r\n      gridGap: theme.spacing(2),\r\n      gridTemplateColumns: '1fr 1fr',\r\n      margin: theme.spacing(4),\r\n   },\r\n}))\r\n\r\nconst podcastSort = (a, b) => {\r\n   return (\r\n      Date.parse(b.lastEpisodePublished) - Date.parse(a.lastEpisodePublished)\r\n   )\r\n}\r\n\r\nconst PodcastPage = (props: PageProps) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n\r\n   const [podcastData, setData] = useState({ queue: [], podcasts: [] })\r\n   useEffect(() => {\r\n      getPodcasts().then((data) => {\r\n         setData({ ...data })\r\n      })\r\n   }, [])\r\n\r\n   return (\r\n      <Layout>\r\n         <Nav></Nav>\r\n         <h1>Podcasts</h1>\r\n         <div className={css.container}>\r\n            {podcastData.podcasts.sort(podcastSort).map((show, index) => (\r\n               <Podcast data={show} key={`episode-${show.title}-${index}`} />\r\n            ))}\r\n         </div>\r\n      </Layout>\r\n   )\r\n}\r\n\r\nexport default PodcastPage\r\n"],"sourceRoot":""}