{"version":3,"sources":["webpack:///./src/pages/podcasts.tsx"],"names":["useStyles","makeStyles","theme","sharedStyles","container","display","gap","gridTemplateColumns","breakpoints","down","margin","tabs","marginTop","tabHeader","fontSize","divider","marginBottom","backgroundColor","palette","secondary","main","height","width","marginLeft","marginRight","count","color","colors","muted","podcastNumber","fontWeight","fontStyle","podcastText","textAlign","maxWidth","lineHeight","PodcastPage","props","useTheme","css","twitter","info","me","social","find","x","name","useState","queue","podcasts","starred","appearances","podcastData","setData","setTabs","TabEnum","Appearances","visibleTab","setVisibleTab","useEffect","getPodcastInfo","then","data","title","length","value","Starred","Queue","Subscribed","podcastStartDate","_getListeningStartDate","stats","timesStartedAt","listeningTime","_getListeningTimeInHours","timeListened","active","bg","className","onClick","e","href","link","username","map","tab","isActive","headerCss","mutedText","join","episode","index","key","sort","a","b","lastEpisodePublished","getTime","show"],"mappings":"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","file":"component---src-pages-podcasts-tsx-3e91ce64e8c86c29550f.js","sourcesContent":["// Gatsby supports TypeScript natively!\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PageProps } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport Nav from '../components/nav'\r\nimport {\r\n   getPodcastInfo,\r\n   _getListeningStartDate,\r\n   _getListeningTimeInHours,\r\n} from '../utils/podcastService'\r\nimport { makeStyles, Theme, useTheme } from '@material-ui/core'\r\nimport { colors, sharedStyles } from '../styles/global'\r\nimport Podcast from '../components/podcast'\r\nimport SiteSection from '../components/presentation/siteSection'\r\nimport { info } from '../data/info'\r\nimport SubHeading from '../components/presentation/subHeading'\r\nimport { PodcastData, Tab, TabEnum } from '../models'\r\nimport PodCastEpisode from '../components/podcastEpisode'\r\nimport PodCastAppearance from '../components/podcastAppearance'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n   ...sharedStyles(theme),\r\n   container: {\r\n      display: 'grid',\r\n      gap: '.5rem',\r\n      gridTemplateColumns: '1fr 1fr',\r\n      [theme.breakpoints.down('sm')]: {\r\n         gridTemplateColumns: '1fr',\r\n         margin: 'auto',\r\n      },\r\n   },\r\n   tabs: {\r\n      display: 'grid',\r\n      gridTemplateColumns: '1fr 1fr 1fr 1fr',\r\n      gap: '1rem',\r\n      margin: '1rem',\r\n      marginTop: '2rem',\r\n      [theme.breakpoints.down('sm')]: {\r\n         gridTemplateColumns: '1fr 1fr',\r\n      },\r\n   },\r\n   tabHeader: {\r\n      fontSize: '1.5rem',\r\n      [theme.breakpoints.down('sm')]: {\r\n         fontSize: '1.0rem',\r\n      },\r\n   },\r\n   divider: {\r\n      display: 'block',\r\n      marginTop: '1rem',\r\n      marginBottom: '15px',\r\n      backgroundColor: theme.palette.secondary.main,\r\n      height: '2px',\r\n      width: '150px',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      [theme.breakpoints.down('sm')]: {\r\n         width: '100px',\r\n      },\r\n   },\r\n   count: {\r\n      fontSize: '1.2rem',\r\n      color: colors.muted,\r\n      [theme.breakpoints.down('sm')]: {\r\n         display: 'none',\r\n      },\r\n   },\r\n   podcastNumber: {\r\n      fontSize: '1.3rem',\r\n      fontWeight: 'bold',\r\n      fontStyle: 'italics',\r\n   },\r\n   podcastText: {\r\n      textAlign: 'left',\r\n      color: colors.muted,\r\n      margin: 'auto',\r\n      maxWidth: '80%',\r\n      '& p': {\r\n         marginBottom: '1rem',\r\n         lineHeight: '1.6rem',\r\n      },\r\n   },\r\n}))\r\n\r\nconst PodcastPage = (props: PageProps) => {\r\n   const theme = useTheme()\r\n   const css = useStyles(theme)\r\n   const twitter = info.me.social.find((x) => x.name === 'Twitter')\r\n\r\n   const [podcastData, setData] = useState<PodcastData>({\r\n      queue: [],\r\n      podcasts: [],\r\n      starred: [],\r\n      appearances: [],\r\n   })\r\n   const [tabs, setTabs] = useState<Tab[]>([])\r\n   const [visibleTab, setVisibleTab] = useState<TabEnum>(TabEnum.Appearances)\r\n\r\n   useEffect(() => {\r\n      getPodcastInfo().then((data) => {\r\n         setData({ ...data })\r\n         setTabs([\r\n            {\r\n               title: `Appearances`,\r\n               count: data.appearances?.length,\r\n               value: TabEnum.Appearances,\r\n            },\r\n            {\r\n               title: `Stared`,\r\n               count: data.starred?.length,\r\n               value: TabEnum.Starred,\r\n            },\r\n            {\r\n               title: `In Queue`,\r\n               count: data.queue?.length,\r\n               value: TabEnum.Queue,\r\n            },\r\n            {\r\n               title: `Subscribed`,\r\n               count: data.podcasts?.length,\r\n               value: TabEnum.Subscribed,\r\n            },\r\n         ])\r\n      })\r\n   }, [])\r\n\r\n   const podcastStartDate = _getListeningStartDate(\r\n      podcastData.stats?.timesStartedAt\r\n   )\r\n   const listeningTime = _getListeningTimeInHours(\r\n      podcastData.stats?.timeListened\r\n   )\r\n   return (\r\n      <Layout>\r\n         <Nav active=\"podcasts\"></Nav>\r\n         <SiteSection bg=\"dark\">\r\n            <SubHeading>Podcasts</SubHeading>\r\n\r\n            <div className={css.podcastText}>\r\n               <p>\r\n                  I subscribe to{' '}\r\n                  <a\r\n                     onClick={(e) => setVisibleTab(TabEnum.Subscribed)}\r\n                     className={css.podcastNumber}\r\n                  >\r\n                     {podcastData.podcasts.length}\r\n                  </a>{' '}\r\n                  podcasts with{' '}\r\n                  <a\r\n                     className={css.podcastNumber}\r\n                     onClick={(e) => setVisibleTab(TabEnum.Queue)}\r\n                  >\r\n                     {podcastData.queue.length}\r\n                  </a>{' '}\r\n                  currently in my podcasts listening queue.{' '}\r\n                  {podcastData.stats && (\r\n                     <>\r\n                        Since {podcastStartDate}, I have listened to over{' '}\r\n                        <span className={css.podcastNumber}>\r\n                           {' '}\r\n                           {listeningTime}\r\n                        </span>{' '}\r\n                        hours of podcasts.{' '}\r\n                     </>\r\n                  )}\r\n               </p>\r\n               <p>\r\n                  I started my podcast journey to make better use of my time\r\n                  during long commutes to the office. Since then my love of this\r\n                  medium has grown considerably and I know listen even without a\r\n                  daily commute. They are a great way to keep up with the latest\r\n                  around the industry. Below is a list of{' '}\r\n                  <a\r\n                     className={css.podcastNumber}\r\n                     onClick={(e) => setVisibleTab(TabEnum.Starred)}\r\n                  >\r\n                     {podcastData.starred.length}\r\n                  </a>{' '}\r\n                  podcasts episodes that I have starred over the years. You can\r\n                  also find the{' '}\r\n                  <a\r\n                     className={css.podcastNumber}\r\n                     onClick={(e) => setVisibleTab(TabEnum.Appearances)}\r\n                  >\r\n                     {podcastData.appearances.length}\r\n                  </a>{' '}\r\n                  episodes on which I was a guest.\r\n               </p>\r\n               <p>\r\n                  I hope you enjoy as much as I have. If you know of other\r\n                  podcasts you would recommend please send me your suggestions\r\n                  at <a href={twitter!.link}>{twitter!.username}</a>\r\n               </p>\r\n            </div>\r\n            <div className={css.tabs}>\r\n               {tabs.map((tab) => {\r\n                  const isActive = tab.value === visibleTab\r\n                  const headerCss = isActive\r\n                     ? css.tabHeader\r\n                     : [css.tabHeader, css.mutedText].join(' ')\r\n                  return (\r\n                     <span\r\n                        className={headerCss}\r\n                        onClick={(e) => setVisibleTab(tab.value)}\r\n                     >\r\n                        {tab.title}\r\n                        <span className={css.count}> ({tab.count})</span>\r\n                        {isActive && <span className={css.divider}></span>}\r\n                     </span>\r\n                  )\r\n               })}\r\n            </div>\r\n\r\n            {visibleTab === TabEnum.Queue && (\r\n               <div className={css.container}>\r\n                  {podcastData.queue.map((episode, index) => (\r\n                     <PodCastEpisode\r\n                        episode={episode}\r\n                        key={`episode-${episode.title}-${index}`}\r\n                     ></PodCastEpisode>\r\n                  ))}\r\n               </div>\r\n            )}\r\n            {visibleTab === TabEnum.Subscribed && (\r\n               <div className={css.container}>\r\n                  {podcastData.podcasts\r\n                     .sort(\r\n                        (a, b) =>\r\n                           b.lastEpisodePublished.getTime() -\r\n                           a.lastEpisodePublished.getTime()\r\n                     )\r\n                     .map((show, index) => (\r\n                        <Podcast\r\n                           data={show}\r\n                           key={`episode-${show.title}-${index}`}\r\n                        />\r\n                     ))}\r\n               </div>\r\n            )}\r\n            {visibleTab === TabEnum.Starred && (\r\n               <div className={css.container}>\r\n                  {podcastData.starred.map((episode, index) => (\r\n                     <PodCastEpisode\r\n                        episode={episode}\r\n                        key={`starred-episode-${episode.title}-${index}`}\r\n                     ></PodCastEpisode>\r\n                  ))}\r\n               </div>\r\n            )}\r\n            {visibleTab === TabEnum.Appearances && (\r\n               <div className={css.container}>\r\n                  {podcastData.appearances.map((episode, index) => (\r\n                     <PodCastAppearance\r\n                        episode={episode}\r\n                        key={`appearance-episode-${episode.title}-${index}`}\r\n                     ></PodCastAppearance>\r\n                  ))}\r\n               </div>\r\n            )}\r\n         </SiteSection>\r\n      </Layout>\r\n   )\r\n}\r\n\r\nexport default PodcastPage\r\n"],"sourceRoot":""}